blog.csdn.net/nunchakushuang
通过url得到函数为url正转
通过视图函数的名字得到url为url反转

开启DEBUG模式的四种方法：
    a.  if __name__ == '__main__' 内 app.run(debug=True)
    b.  app = Flask(__name__) 后 app.config.update(DEBUG=True)
    c.  app = Flask(__name__) 后 app.debug = True
    d.  config.py 内 添加DEBUG=True , 视图py导入config.py ,
        app = Flask(__name__) 后 app.config.from_object(config)

使用配置文件的两种方式：
    a.  使用app.config.from_object的方式加载文件：
        import config
        app.config.from_object(config)
    b.  使用app.config.from_pyfile的方式加载文件（不局限于'.py'文件,'.txt'也同样适合）：
        app.config.from_pyfile('config.py', slient=True)  # slient=True表示文件不存在时跳过不报错

url传递参数：
    @app.route('/article/<id>/')  # 对参数id的数据类型要求为string(默认参数的数据类型是string)
    @app.route('/article/<int:id>/')  # 对参数id的数据类型要求个int,格式为<type:variable_name>
    类型一共有：string(除'/\'外的任何文本)、int、float、uuid、path(与string相似，但是可以接受斜杠)、any
            any示例：@app.route('/<any(blog,user):url_path>/<id>/')
                    def detail(url_path,id):  # /blog/<id>/  和 /user/<id>/都会进入这个视图函数

    ?key=value的形式时：
        from flask import request
        value = request.args.get('key')

url_for(第一个参数为视图函数的名字的字符串，后面的参数传递给'url'，
    如果传递的参数在'url'中已经定义，那么参数会以'path'的形式传递，如果未定义，参数会变成查询字符串传递到'url'，?key=value):
    比如：@app.route('/login/')
    login_url = url_for('login')  # login_url 指向名为login的视图函数的路径
    # 当route有参数时，url_for需要带上参数，
    # url_for 会自动处理特殊字符，不需要手动处理
    login_url = url_for('login',next='/')  # login_url = /login/?next=%2F

自定义url转换器：
    1.实现一个类，继承自BaseConverter
    2.在自定义的类中，重写'regex',也就是这个变量的正则表达式
    3.将自定义的类，映射到'app.url_map.converters'上
    app.url_map.converters['xxx'] = 自定义的类

    转换器的附加功能：能够对传入的数据进行处理
    1.重写类下的to_python(self, value)方法，返回对value处理后的值
    2.重写类下的to_url(self, value)方法,作用是使用url_for时,对传入的参数进行处理，返回处理后的url

运行在指定端口和host
    app.run(host='0.0.0.0', port=5000)

url指定请求方法，未指定的方法无法请求, 默认为GET
    @app.route('/', methods=['POST', 'GET'])

视图函数可以返回：
    1.字符串
    2.元祖：(响应体,状态码,头部信息)
    3.Response对象及其子类

自定义响应：
    1.继承Response类
    2.实现类方法force_type(cls,response,environ=None)
        (Response类不支持的数据类型会经过这个方法处理,如非字典、非元祖、非Response对象)
            return Response('处理后的结果')
        PS: jsonify类可以将字典转换成json对象，还将该对象包装成一个Response对象
            response = jsonify(response)
            return super(自定义类, cls).force_type(response,environ)
    3.指定app.response_class=自定义类





pymysql

Flask-SQLAlchemy
    pip3 install flask-sqlalchemy
Flask-Script

Flask-Migrate