安装：
  pip install flask-restful
使用（可以下载Postman测试Api）：
  1.从'flask_restful'导入Api，创建一个Api对象
  2.如果使用Flask-Restful，那么定义视图函数的时候，就要继承自flask_restful.Resource类，然后再根据当前请求的method来定义相应的方法。
    from flask import Flask,render_template,url_for
    from flask_restful import Api,Resource

    app = Flask(__name__)
    # 用Api来绑定app
    api = Api(app)

    class LoginView(Resource):
        def get(self):
            return "username"
        def post(self):
            return {"username":"zhiliao"}
    # endpoint 用于url_for 反转url
    api.add_resource(LoginView,'/login/',endpoint='login')
  3.add_resource的第二个参数是访问这个视图函数的url，这个url可以跟之前的route一样，可以传递参数。
    并且还有一点不同的是，这个方法可以传递多个url来指定这个视图函数。
    如：
    from flask import Flask,render_template,url_for
    from flask_restful import Api,Resource

    app = Flask(__name__)
    # 用Api来绑定app
    api = Api(app)

    class LoginView(Resource):
        # username=None,使一些其他url可以不带上username
        def post(self,username=None):
            return {"username":"zhiliao"}
    # 此时/login/xx/和/regist/都可以访问这个url
    api.add_resource(LoginView,'/login/<username>/','/regist/',mendpoint='index')
    
参数解析：
    from flask_restful import reqparse
    class LoginView(Resource):
        def post(self):
            parser = reqparse.ReqParser()
            parser.add_argument('username', type=str, help="用户名错误")
            parser.add_argument('password', type=str, help="密码错误")
            args = parser.parse_args()
            print(args)  # {"username":"xx", "password":"xxx"}
            return {"username":"zhiliao"}
            
    add_argument可以指定这个字段的名字，这个字段的数据类型等。以下将对这个方法的一些参数做详细讲解：
      default：默认值，如果这个参数没有值，那么将使用这个参数指定的值。
      required：是否必须。默认为False，如果设置为True，那么这个参数就必须提交上来。
      type：这个参数的数据类型，如果指定，那么将使用指定的数据类型来强制转换提交上来的值。
      choices：选项。提交上来的值只有满足这个选项中的值才符合验证通过，否则验证不通过。
      help：错误信息。如果验证失败后，将会使用这个参数指定的值作为错误信息。
      trim：是否要去掉前后的空格。
   其中的type，可以使用python自带的一些数据类型，也可以使用flask_restful.inputs下的一些特定的数据类型来强制转换。比如一些常用的：
      type=inputs.url：会判断这个参数的值是否是一个url，如果不是，那么就会抛出异常。
      type=inputs.regex(r'...')：正则表达式。
      type=inputs.date：将这个字符串转换为datetime.date数据类型。如果转换不成功，则会抛出一个异常。
      
输出字段：
    对于一个视图函数，你可以指定好一些字段用于返回。
    以后可以使用ORM模型或者自定义的模型的时候，他会自动的获取模型中的相应的字段，生成json数据，然后再返回给客户端。
    这其中需要导入flask_restful.marshal_with装饰器。并且需要写一个字典，来指示需要返回的字段，以及该字段的数据类型。
    示例代码如下：
    class ProfileView(Resource):
        resource_fields = {
            'username': fields.String,
            'age': fields.Integer,
            'school': fields.String
        }

        @marshal_with(resource_fields)
        def get(self,user_id):
            user = User.query.get(user_id)
            return user
     在get方法中，返回user的时候，flask_restful会自动的读取user模型上的username以及age还有school属性。
     组装成一个json格式的字符串返回给客户端。
     restful规范中要求,定义好了返回的参数后,即使这个参数没有值,也应该返回,返回一个Null回去

重命名属性：
    很多时候你面向公众的字段名称是不同于内部的属性名。使用 attribute可以配置这种映射。
    比如现在想要返回user.school中的值，但是在返回给外面的时候，想以education返回回去，那么可以这样写：
    resource_fields = {
        'education': fields.String(attribute='school')
    }
    
默认值：
    在返回一些字段的时候，有时候可能没有值，那么这时候可以在指定fields的时候给定一个默认值，示例代码如下：
    resource_fields = {
        'age': fields.Integer(default=18)
    }
    
复杂结构：
    有时候想要在返回的数据格式中，形成比较复杂的结构。那么可以使用一些特殊的字段来实现。
    比如要在一个字段中放置一个列表，那么可以使用fields.List，比如在一个字段下面又是一个字典，那么可以使用fields.Nested。
    以下是复杂结构的用法：
    class ArticleView(Resource):
        resource_fields = {
            'title': fields.String,
            'user': fields.Nested({
                'username': fields.String,
                'user_email': fields.String(attribute='email')
            }, attribute='author'),
            # 'authorname': fields.String(attribute='author.username'),  # author指User模型
            'tag': fields.List(fields.String(attribute='name'), attribute='tags')
        }

        @marshal_with(resource_fields)
        def get(self, a_id):
            article = Article.query.get(a_id)
            return article

在蓝图中使用flask-restful
    Api()类不再绑定app,直接绑定蓝图即可,之后app绑定蓝图即可实现蓝图中使用flask-restful
    app.py:
        from flask import Flask
        from blueprints.bp_restful import bp_rest
        import config
        from exts import db

        app = Flask(__name__)
        app.config.from_object(config)
        db.init_app(app)
        app.register_blueprint(bp_rest)

        if __name__ == '__main__':
            app.run(debug=True, port=5008)
    blueprint.py:
        from flask import Blueprint
        from flask_restful import Api, Resource, fields, marshal_with
        from models import Article

        bp_rest = Blueprint("rest", __name__, url_prefix='/api')
        api = Api(bp_rest)

        class ArticleView(Resource):
            resource_fields = {
                'article_title': fields.String(attribute='title'),
                'author': fields.Nested({
                    'author_name': fields.String(attribute='username'),
                    'author_email': fields.String(attribute='email')
                }),
                'article_tag': fields.List(fields.String(attribute='name'), attribute='tags')
            }

            @marshal_with(resource_fields)
            def get(self, article_id):
                article = Article.query.get(article_id)
                return article

        api.add_resource(ArticleView, '/article/<article_id>/', endpoint='article')
