将ORM模型映射到数据库
    1.用'declarative_base'根据'engine'创建一个基类
        from sqlalchemy.ext.declarative import declarative_base
        engine = create_engine(DB_URI)
        Base = declarative_base(engine)
    2.用这个'Base'类作为基类来创建ORM类
        要定义'__tablename__'类属性,来指定这个模型映射到数据库中的表名
        创建属性来映射到表中的字段,属性的类型必须是Column类型
        class Person(Base):
            __tablename__ = 'person'
            id = Column(INTEGER, primary_key=True, autoincrement=True)
            name = Column(String(50))
            age = Column(INTEGER)
    3.使用'Base.metadata.create_all()',将创建好的ORM模型，映射到数据库中
    4.一旦使用'Base.metadata.create_all()'创建好数据库表后,
        即使改变ORM类中的字段(增加减少列),也不会重新映射

用session做数据的增删改查：
    ps：此session非网站的session
    1.创建session对象
        from sqlalchemy.orm import sessionmaker
        session = sessionmaker(engine)()
    2.增：
        # 单条数据
        def create_data():
            p = Person(name='aabbcc', age=10)
            session.add(p)  # 此时还没提交到数据库
            session.commit()
        # 多条数据
        def create_data():
            p1 = Person(name='aabbccdd', age=11)
            p2 = Person(name='aabbccddee', age=12)
            session.add_all([p1, p2])  # 此时还没提交到数据库
            session.commit()
    3.删：
        def delete_data():
            # 删除前需要获得这个对象
            person = session.query(Person).first()
            session.delete(person)
            session.commit()
    4.改：
        def update_data():
            # 修改前需要获得这个对象
            person = session.query(Person).first()
            # 直接修改属性即可
            person.name = 'aa'
            # 修改之后提交
            session.commit()
    5.查：
        ps:重写模型的__str__方法可以改变print的返回值
        def select_data():
            # 查找某个模型的所有数据
            select_person = session.query(Person).all()
            # 根据条件查找  使用filter_by(筛选条件)
            select_person = session.query(Person).filter_by(age=11).all()
            # 或 使用filter(条件查询)  如>=, <=
            select_person = session.query(Person).filter(Person.age==11).all()
            for p in select_person:
                print(p)
            # 根据主键ID获取,只会返回一条数据或者None
            person = session.query(Person).get(1)
            print(person)
            # 使用first方法获取结果集中的第一条数据
            person = session.query(Person).first()
            print(person)

sqlalchemy常用数据类型
    Integer,INT : 整形
    Float ： 浮点类型,映射到数据库中是32位,过长会丢失精度
    Boolean ：　传递True/False进去
    DECIMAL ： 定点类型,是专门为了解决浮点类型精度丢失的问题,存储钱相关的字段的时候建议大家都使用这个数据类型
            如:prices = Column(DECIMAL(10, 4)) #10表示一共有10位,小数占4位,存储位数超过时会报错
    enum ： 枚举类型  tag = Column(Enum("tag1", "tag2", "tag3"))
            或:
                import enum
                class TagEnum(enum.Enum):
                    tag1 = "tag1"
                    tag2 = "tag2"
                    tag3 = "tag3"
                tag = Column(Enum(TagEnum))
            存储时:
                article = Article(tag=TagEnum.tag1)或article = Article(tag="tag1")
    Date ： 传递 datetime.date()进去
            存储时:
                from datetime import date
                article = Article(create_time=date(year=2018, month=1, day=10))
                或 article = Article(create_time=date(2018, 1, 10))
    Datetime ： 传递 datetime.datetime()进去
    Time ： 传递 datetime.time()进去
    String ： 字符类型，使用时需要指定长度
    Text ： 文本类型
    LONGTEXT ： 长文本类型(只有Mysql有LONGTEXT类型,需要从其他包中导入)
                from sqlalchemy.dialects.mysql import LONGTEXT

Column常用参数
    primary_key     主键
    autoincrement   自增
    default         默认值, 可以指定函数
                    如:可以使用create_time = Column(DATETIME, default=datetime.now)为数据添加创建时间
    nullable        是否可为空,默认为True可以为空
    unique          是否唯一
    onupdate        在数据更新的时候会调用这个参数指定的值或方法,第一次创建数据时不会用onupdate的值,只会用default的值
                    如:update_time = Column(DATETIME, onupdate=datetime.now) 修改数据时会自动更新时间
                    优化:update_time = Column(DATETIME, onupdate=datetime.now, default=datetime.now)
    name            该属性在数据库中的字段映射,即每一列的名字,不设置默认为变量名
                    这个参数也可以作为位置参数,在第1个参数来指定
                    如:   title = Column(String(50), name='my_title')
                    等同于:title = Column('my_title',String(50))

query可用参数
    1.模型对象.指定查找这个模型中所有的对象
        result = session.query(Article).all()
    2.模型中的属性.可以指定只查找某个模型的其中几个属性.
        result = session.query(Article.id, Article.title).all()
        返回一个列表,列表中的每一个元素为模型中的属性组成的元祖
    3.聚合函数
        func.count : 统计行的数量
            from sqlalchemy import func
            result = session.query(func.count(Article.id)).first()
        func.avg : 求平均值
        func.max : 求最大值
        func.min : 求最小值
        func.sum : 求和

filter常用过滤条件(不加.all()或.first()可以得到原生SQL语句)
    1.equals : session.query(Article).filter(Article.id == 1)
    2.not equals : session.query(Article).filter(Article.id != 1)
    3.like : session.query(Article).filter(Article.title.like('title%'))  # %为通配符
             session.query(Article).filter(Article.title.ilike('title%'))  # ilike 不区分大小写
    4.in : session.query(Article).filter(Article.title.in_(['title1', 'title2']))
           # 也可作用于一个Query结果集
           session.query(Article).filter(Article.title.in_(session.query(Article.title).filter(Article.title.like('title%'))))
    5.not in : session.query(Article).filter(~Article.title.in_(['title1', 'title2']))
               session.query(Article).filter(Article.title.notin_(['title1', 'title2']))
    6.is null : session.query(Article).filter(Article.title == None)
    7.is not null : session.query(Article).filter(Article.title != None)
    8.and : session.query(Article).filter(Article.title == 'title0', Article.id == 0)  # 用位置参数替代
      或者 : from sqlalchemy import and_
            result = session.query(Article).filter(and_(Article.title == 'title0', Article.id == 1)).all()
    9.or : from sqlalchemy import or_
           result = session.query(Article).filter(or_(Article.title == 'title0', Article.id == 2)).all()

外键及其4种约束(show create table xxx\G 可以查看创建表的语句)
    ps:ENGINE=InnoDB 是外键支持所需要的,不设置则不支持外键的4种约束
    创建外键:
        from sqlalchemy import ForeignKey
        # 在从表中添加一个字段,指定这个字段外键是哪个表的哪个字段就可以了,必须和父表的主键字段类型一致
        # 主表(user):
            id = Column(INTEGER, primary_key=True, autoincrement=True)
        # 从表(article):
            uid = Column(INTEGER, ForeignKey("user.id"))
    外键约束(删除主表主键时从表所采取的措施),默认外键约束为RESTRICT
        1.RESTRICT:父表数据被删除,会阻止此次操作
        2.NO ACTION:在MySQL中, 同RESRTICT
        3.CASCADE:级联删除,主表删除后,子表所引用的数据也会被删除
        4.SET NULL:父表数据被删除,子表数据设为NULL,与nullable=False冲突
        使用:
            uid = Column(INTEGER, ForeignKey("user.id", ondelete="RESTRICT"))

ORM外键查找
    1.通过从表找主表:
        from sqlalchemy.orm import relationship
        在从表添加:
            xxuserxx = relationship('User')
        之后可以通过以下得到外键对象:
            article = session.query(Article).first()
            print(article.xxuserxx.username)
    2.通过主表找从表(一对多):
        from sqlalchemy.orm import relationship
        在主表添加:
            xxarticlexx = relationship('Article')
        之后可以通过以下得到从表对象:
            user = session.query(User).first()
            print(user.xxarticlexx.)

    3.在从表(添加backref参数)即可实现双向查找
        user = relationship('User', backref="xxarticlesxx")
        backref参数就是在主表类中添加了一个"xxarticlesxx"变量指向从表

外键一对多增加数据:
    # 从表为主的存储
        # user = User(username='xxxx')
        user = session.query(User).first()
        article1 = Article(title='asd65', price=122)
        article1.user = user

        session.add(article1)
        session.commit()
    # 主表为主存储
        user = User(username='xxx')
        article1 = Article(title='zxc232', price=45)
        article2 = Article(title='wer3', price=68)
        user.xxarticlesxx.append(article1)
        user.xxarticlesxx.append(article2)

        session.add(user)
        session.commit()

外键一对一(uselist参数)
    1.
    # 从表:
        user = relationship("User")
    # 主表:
        # uselist参数为False时关闭一对多,即形成一对一
        extend = relationship('UserExtend', uselist=False)
    2. 双向指引
        from sqlalchemy.orm import backref
        user = relationship("User", backref=backref("extend", uselist=False))
