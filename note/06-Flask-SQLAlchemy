Flask-SQLAlchemy

安装:
    pip3 install Flask-SQLAlchemy

数据库连接:
    1.在配置文件config.py中:
        HOST = '127.0.0.1'
        PORT = 3306
        DATABASE = 't4'
        USERNAME = 'root'
        PASSWORD = '124578'

        DB_URI = "mysql+pymysql://{username}:{password}@{host}:{port}/{db}" \
                 "?charset=utf8".format(username=USERNAME,
                                        password=PASSWORD, host=HOST,
                                        port=PORT, db=DATABASE)

        # SQLALCHEMY_DATABASE_URI是固定变量名,名字不可变
        SQLALCHEMY_DATABASE_URI = DB_URI
    ~或者在视图文件中也可以: app.config['SQLALCHEMY_DATABASE_URI'] = DB_URI
    2.绑定APP
        from flask_sqlalchemy import SQLAlchemy
        db = SQLAlchemy(app)

创建ORM模型:
    class User(db.Model):
        # db.Model封装了__tablename__, 如果不写tablename, 默认使用模型类的名字小写, 建议写__tablename__属性
        # 如果为驼峰命名类,则除了第一个大写字母,后面的大写字母变为小写后前面会加_,如UserModel -> user_model
        __tablename__ = "user"
        id = db.Column(db.INTEGER, primary_key=True, autoincrement=True)
        username = db.Column(db.String(50), nullable=False)
        def __repr__(self):
            return "<User(username : %s )>" % self.username

    class Article(db.Model):
        __tablename__ = 'article'
        id = db.Column(db.INTEGER, primary_key=True, autoincrement=True)
        title = db.Column(db.String(50), nullable=False)
        uid = db.Column(db.INTEGER, db.ForeignKey('user.id'))

        author = db.relationship('User', backref=db.backref('articles'))

        def __repr__(self):
            return "<Article(title : %s )>" % self.title
    # 映射到数据库
    # db.drop_all()
    # db.create_all()

ORM操作(不再需要从SQLAlchemy导入Integer,String等模块,直接使用db.Integer,db.String):
    (也不再需要sessionmaker创建session, 使用db.session即可)
    # 增
    # user = User(username='2aa222')
    # article = Article(title='bbqqssqq')
    # article.author = user
    # db.session.add(user)
    # db.session.commit()
    # 查 order_by,filter,filter_by,group_by,having,join
    # users = User.query.all()
    # users = User.query.order_by(User.id.desc()).all()
    # print(users)
    # 上面是单表查询的简便写法,多表查询还是要db.session.query
    # 改
    # user = User.query.first()
    # user.username = 'asdasd'
    # db.session.commit()
    # 删
    # user = User.query.first()
    # db.session.delete(user)
    # db.session.commit()

alembic(非Flask项目内的用法)
    安装:
        pip3 install alembic
    用法(如在虚拟环境中需要进入到虚拟环境):
        1.初始化alembic仓库:cd到项目目录,执行命令'alembic init alembic',创建一个名叫'alembic'的仓库
            --> 会生成一个仓库名命名的文件夹和alembic.ini配置文件
        2.创建模型类:创建一个'model.py',然后在里面定义你的模型类
        3.修改配置文件
            a.在alembic.ini中设置数据库的连接,sqlalchemy.url = driver://user:pass@localhost/dbname
            以Mysql为例:sqlalchemy.url = mysql+pymysql://root:pass@localhost/t4?charset=utf8
            b.为了使用模型类更新数据库,需要在env.py文件中设置target_metadata,默认为target_metadata=None,
            使用sys模块把当前项目的路径导入到path中:
                import sys, os
                sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
                import demo20_orm_alembic
                target_metadata = demo20_orm_alembic.Base.metadata
        4.自动生成迁移文件:使用alembic revision --autogenerate -m "message" 将当前模型中的状态迁移到数据库
        5.更新数据库, 使用alembic upgrade head 将刚刚生成的迁移文件,真正映射到数据库.
            同理,如果要降级,那么使用 alembic downgrade head
        6.之后修改模型后, 重复4~5
        7.命令和参数解释:
            init: 创建一个alembic仓库