Flask上下文
    Local线程隔离对象:
        只要绑定在Local对象上的属性,在每个线程中都是隔离的
        在FLask中,类似于'request'的对象(如session对象,g对象),其实时帮到了一个'werkzeug.local.Local'对象上.这样,即使是同一个对象,那么在多个线程中都是隔离的
    Thread Local对象:
        只要满足绑定到这个对象上的属性,在每个线程中都是隔离的那么他就叫做'Thread Local'对象
    应用上下文和请求上下文:
        应用上下文和请求上下文都是存放到一个'LocalStack'的栈中.和应用app相关的操作就必须放到应用上下文,
        比如通过'current_app'获取当前的这个'app';和请求相关的操作就必须用到请求上下文,比如使用'url_for'反转视图函数
        在视图函数中,不用担心上下文的问题,因为视图函数要执行,那么肯定时通过访问url的方式执行的,
        那么这种情况下,flask底层就自动的帮我们把请求上下文和应用上下文都推入到了相应的栈中
        如果在视图函数外想要执行相关的操作,那么就必须要手动推入相关的上下文
    手动推入app上下文:
    flask.current_app: 当前项目运行的app,只能在LocalStack Context中调用,请求一个视图函数时,flask会添加一个appcontext到LocalStack Context中,
        视图函数外不能使用current_app,需要手动把主线程运行push到LocalStack Context中
        第一种方式:
        app_context = app.app_context()
        app_context.push()
        print(current_app.name)
        第二种方式:
        with app.app_context():
            print(current_app.name)
        print(current_app.name)  # 在应用上下文外此句会报错:Working outside of application context.
    手动推入请求上下文:
    flask.url_for: 通过函数名或endpoint反转得到url的方法,在视图函数外使用时会报错:Attempted to generate a URL without the application context being pushed
        当在with app.app_context()内使用时会报:Application was not able to create a URL adapter for request independent URL generation
        部分源码:
            appctx = _app_ctx_stack.top
            reqctx = _request_ctx_stack.top
            if appctx is None:
                raise RuntimeError('Attempted to generate a URL without the '
                                   'application context being pushed. This has to be '
                                   'executed when application context is available.')
            if reqctx is not None:
                url_adapter = reqctx.url_adapter
                blueprint_name = request.blueprint
                if not reqctx.request._is_old_module:
                    if endpoint[:1] == '.':
                        if blueprint_name is not None:
                            endpoint = blueprint_name + endpoint
                        else:
                            endpoint = endpoint[1:]
                else:
                    # TODO: get rid of this deprecated functionality in 1.0
                    if '.' not in endpoint:
                        if blueprint_name is not None:
                            endpoint = blueprint_name + '.' + endpoint
                    elif endpoint.startswith('.'):
                        endpoint = endpoint[1:]
                external = values.pop('_external', False)

            # Otherwise go with the url adapter from the appctx and make
            # the URLs external by default.
            else:
                url_adapter = appctx.url_adapter
                if url_adapter is None:
                    raise RuntimeError('Application was not able to create a URL '
                                       'adapter for request independent URL generation. '
                                       'You might be able to fix this by setting '
                                       'the SERVER_NAME config variable.')
                external = values.pop('_external', True)
        通过源码可以看到url_for需要一个应用上下文和请求上下文,不存在时会报相应的错误
        with app.test_request_context():
            #使用with app.test_request_context()可以手动推入一个请求上下文
            #如果当前应用上下文栈中没有应用上下文,那么会首先推入一个应用上下文到栈中
            print(url_for('abc'))
    为什么上下问需要放在栈中:
    1.应用上下文:Flask底层是基于werkzeug,werkzeug是可以包含多个app的,所以这时候用一个栈来保存.
    如果你在使用app1,那么app1应该是要在栈的顶部,如果用完了app1,那么app1应该从栈中删除.方便其他代码使用下面的app
    2.如果在写测试代码,或者离线脚本的时候,我们有时候可能需要创建多个请求上下文,这时候就需要存放到一个栈中了.
    使用哪个请求上下文的时候,就把对应的请求上下文放到栈的顶部,用完了就要把这个请求上下文从栈中移除掉

g对象(global的简写):g对象时在整个Flask应用运行期间都是可以使用的.并且他也是跟request一样,是线程隔离的.
    这个对象时专门用来爱存储开发者自己定义的一些数据,方便在整个Flask程序中都可以使用.
    一般使用就是,将一些经常会用到的数据绑定到上面,以后就直接从g上面取就可以了,而不需要通过传参的形式,这样更加方便
    如:
    a.py中from flask import g
    g.name = 'abc'
    然后从b.py中from flask import g
    print(g.name)  # 会输出abc

常用的钩子函数：
    before_first_request：处理第一次请求之前执行。例如以下代码：
      @app.before_first_request
      def first_request():
          print 'first time request'
    before_request：在每次请求之前执行。通常可以用这个装饰器来给视图函数增加一些变量。例如以下代码：
      @app.before_request
      def before_request():
          if not hasattr(g,'user'):
              setattr(g,'user','xxxx')
    teardown_appcontext：不管是否有异常，注册的函数都会在每次请求之后执行。
      @app.teardown_appcontext
      def teardown(exc=None):
          if exc is None:
              db.session.commit()
          else:
              db.session.rollback()
          db.session.remove()
    template_filter：在使用Jinja2模板的时候自定义过滤器。比如可以增加一个upper的过滤器（当然Jinja2已经存在这个过滤器，本示例只是为了演示作用）：
      @app.template_filter
      def upper_filter(s):
          return s.upper()
    context_processor：上下文处理器。必须返回一个字典,返回的字典中的键可以在所有模板中使用。
    例如在很多模板中都需要用到的变量,那么就可以使用这个钩子函数来返回,而不用在每个视图函数中去写：
      @app.context_processor
      def context_processor():
          return {'current_user':'xxx'}
    errorhandler：errorhandler接收状态码，可以自定义返回这种状态码的响应的处理方法。
    例如处理404页面不存在错误时,重定向到首页或自定义优雅的错误页面：
      @app.errorhandler(404)
      # 必须接受一个参数(error)来接受错误信息,没有这个参数会报错
      def page_not_found(error):
          # 必须返回相应的状态码,否则会当做200返回
          return 'This page does not exist',404

    视图函数内abort(404)的意思为手动抛出404错误,开发者可以视情况自行抛出相应的错误

信号机制及其使用:
    1.安装: pip install blinker
    2.自定义信号:
        自定义信号分为3步，第一是定义一个信号，第二是监听一个信号，第三是发送一个信号。以下将对这三步进行讲解：
        定义信号：定义信号需要使用到blinker这个包的Namespace类来创建一个命名空间。比如定义一个在访问了某个视图函数的时候的信号。示例代码如下：
          from blinker import Namespace
          # Namespace的作用是防止多人开发时,信号名字的冲突
          mysignal = Namespace()
          visit_signal = mysignal.signal('visit-signal')
        监听信号：监听信号使用singal对象的connect方法，在这个方法中需要传递一个函数，用来接收以后监听到这个信号该做的事情。示例代码如下：
          def visit_func(sender,username):
            print(sender)
            print(username)
          mysignal.connect(visit_func)
        发送信号：发送信号使用singal对象的send方法，这个方法可以传递一些其他参数过去。示例代码如下：
          mysignal.send(username='zhiliao')
          更好的方法是把参数存储到g对象中,监听函数从g对象中取到参数,此时mysignal.send()不用传递参数
    3.flask 内置的9种信号:
        flask.template_rendered：模版渲染完毕后发送，示例如下：
        1.before_render_template和template_rendered  模板渲染前后,在render_template源码内发送了这两个信号
          from flask import template_rendered
          # template 模板的名字,context传递给模板的参数
          def log_template_renders(sender,template,context,*args):
              print('sender:',sender)
              print('template:',template)
              print('context:',context)
          template_rendered.connect(log_template_renders,app)
        2.request_started,request_finished,got_request_exception,request_tearing_down  请求前,后,异常,被销毁
        flask.request_started：请求开始之前，在到达视图函数之前发送，订阅者可以调用request之类的标准全局代理访问请求。示例如下：
          def log_request_started(sender,**extra):
              print 'sender:',sender
              print 'extra:',extra
          request_started.connect(log_request_started,app)
          
        flask.request_finished：请求结束时，在响应发送给客户端之前发送，可以传递response，示例代码如下：
          def log_request_finished(sender,response,*args):
              print 'response:',response
          request_finished.connect(log_request_finished,app)
          
        flask.got_request_exception：在请求过程中抛出异常时发送，异常本身会通过exception传递到订阅的函数。示例代码如下：
          def log_exception_finished(sender,exception,*args):
              print 'sender:',sender
              print type(exception)
          got_request_exception.connect(log_exception_finished,app)
          
        flask.request_tearing_down：请求被销毁的时候发送，即使在请求过程中发生异常，也会发送，示例代码如下：
          def log_request_tearing_down(sender,**kwargs):
              print 'coming...'
          request_tearing_down.connect(log_request_tearing_down,app)
        3.appcontext_tearing_down, appcontext_pushed, appcontext_popped应用上下文销毁
        flask.appcontext_tearing_down：在应用上下文销毁的时候发送，它总是会被调用，即使发生异常。示例代码如下：
          def log_appcontext_tearing_down(sender,**kwargs):
              print 'coming...'
          appcontext_tearing_down.connect(log_appcontext_tearing_down,app)

Flask-Mail(使用flask发邮件):
    安装:
        pip install Flask-Mail
    使用:
        1.绑定app:
            from flask_mail import Mail
            mail = Mail(app)
            # 或: exts.py先初始化mail = Mail(), 再从主app初始化mail.init_app(app)
        2.配置:
            MAIL_SERVER  # 发送者邮箱的服务器地址
            MAIL_PORT  # 发送者邮箱的服务器端口
            MAIL_USE_TLS : default False
            MAIL_USE_SSL : default False
            MAIL_DEBUG : default app.debug
            MAIL_USERNAME : # 用户名
            MAIL_PASSWORD : # 授权码,到邮箱开通
            MAIL_DEFAULT_SENDER : # 默认发送人
            MAIL_MAX_EMAILS : default None
            MAIL_SUPPRESS_SEND : default app.testing
            MAIL_ASCII_ATTACHMENTS : default False

flask-paginate(jinja2分页)