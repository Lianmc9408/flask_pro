Flask上下文
    Local线程隔离对象:
        只要绑定在Local对象上的属性,在每个线程中都是隔离的
        在FLask中,类似于'request'的对象(如session对象,g对象),其实时帮到了一个'werkzeug.local.Local'对象上.这样,即使是同一个对象,那么在多个线程中都是隔离的
    Thread Local对象:
        只要满足绑定到这个对象上的属性,在每个线程中都是隔离的那么他就叫做'Thread Local'对象
    应用上下文和请求上下文:
        应用上下文和请求上下文都是存放到一个'LocalStack'的栈中.和应用app相关的操作就必须放到应用上下文,
        比如通过'current_app'获取当前的这个'app';和请求相关的操作就必须用到请求上下文,比如使用'url_for'反转视图函数
        在视图函数中,不用担心上下文的问题,因为视图函数要执行,那么肯定时通过访问url的方式执行的,
        那么这种情况下,flask底层就自动的帮我们把请求上下文和应用上下文都推入到了相应的栈中
        如果在视图函数外想要执行相关的操作,那么就必须要手动推入相关的上下文
    手动推入app上下文:
    flask.current_app: 当前项目运行的app,只能在LocalStack Context中调用,请求一个视图函数时,flask会添加一个appcontext到LocalStack Context中,
        视图函数外不能使用current_app,需要手动把主线程运行push到LocalStack Context中
        第一种方式:
        app_context = app.app_context()
        app_context.push()
        print(current_app.name)
        第二种方式:
        with app.app_context():
            print(current_app.name)
        print(current_app.name)  # 在应用上下文外此句会报错:Working outside of application context.
    手动推入请求上下文:
    flask.url_for: 通过函数名或endpoint反转得到url的方法,在视图函数外使用时会报错:Attempted to generate a URL without the application context being pushed
        当在with app.app_context()内使用时会报:Application was not able to create a URL adapter for request independent URL generation
        部分源码:
            appctx = _app_ctx_stack.top
            reqctx = _request_ctx_stack.top
            if appctx is None:
                raise RuntimeError('Attempted to generate a URL without the '
                                   'application context being pushed. This has to be '
                                   'executed when application context is available.')
            if reqctx is not None:
                url_adapter = reqctx.url_adapter
                blueprint_name = request.blueprint
                if not reqctx.request._is_old_module:
                    if endpoint[:1] == '.':
                        if blueprint_name is not None:
                            endpoint = blueprint_name + endpoint
                        else:
                            endpoint = endpoint[1:]
                else:
                    # TODO: get rid of this deprecated functionality in 1.0
                    if '.' not in endpoint:
                        if blueprint_name is not None:
                            endpoint = blueprint_name + '.' + endpoint
                    elif endpoint.startswith('.'):
                        endpoint = endpoint[1:]
                external = values.pop('_external', False)

            # Otherwise go with the url adapter from the appctx and make
            # the URLs external by default.
            else:
                url_adapter = appctx.url_adapter
                if url_adapter is None:
                    raise RuntimeError('Application was not able to create a URL '
                                       'adapter for request independent URL generation. '
                                       'You might be able to fix this by setting '
                                       'the SERVER_NAME config variable.')
                external = values.pop('_external', True)
        通过源码可以看到url_for需要一个应用上下文和请求上下文,不存在时会报相应的错误
        with app.test_request_context():
            #使用with app.test_request_context()可以手动推入一个请求上下文
            #如果当前应用上下文栈中没有应用上下文,那么会首先推入一个应用上下文到栈中
            print(url_for('abc'))
    为什么上下问需要放在栈中:
    1.应用上下文:Flask底层是基于werkzeug,werkzeug是可以包含多个app的,所以这时候用一个栈来保存.
    如果你在使用app1,那么app1应该是要在栈的顶部,如果用完了app1,那么app1应该从栈中删除.方便其他代码使用下面的app
    2.如果在写测试代码,或者离线脚本的时候,我们有时候可能需要创建多个请求上下文,这时候就需要存放到一个栈中了.
    使用哪个请求上下文的时候,就把对应的请求上下文放到栈的顶部,用完了就要把这个请求上下文从栈中移除掉

    g对象(global的简写):g对象时在整个Flask应用运行期间都是可以使用的.并且他也是跟request一样,是线程隔离的.
        这个对象时专门用来爱存储开发者自己定义的一些数据,方便在整个Flask程序中都可以使用.
        一般使用就是,将一些经常会用到的数据绑定到上面,以后就直接从g上面取就可以了,而不需要通过传参的形式,这样更加方便
        如:
        a.py中from flask import g
        g.name = 'abc'
        然后从b.py中from flask import g
        print(g.name)  # 会输出abc

    常用的钩子函数：
        before_first_request：处理第一次请求之前执行。例如以下代码：
          @app.before_first_request
          def first_request():
              print 'first time request'
        before_request：在每次请求之前执行。通常可以用这个装饰器来给视图函数增加一些变量。例如以下代码：
          @app.before_request
          def before_request():
              if not hasattr(g,'user'):
                  setattr(g,'user','xxxx')
        teardown_appcontext：不管是否有异常，注册的函数都会在每次请求之后执行。
          @app.teardown_appcontext
          def teardown(exc=None):
              if exc is None:
                  db.session.commit()
              else:
                  db.session.rollback()
              db.session.remove()
        template_filter：在使用Jinja2模板的时候自定义过滤器。比如可以增加一个upper的过滤器（当然Jinja2已经存在这个过滤器，本示例只是为了演示作用）：
          @app.template_filter
          def upper_filter(s):
              return s.upper()
        context_processor：上下文处理器。返回的字典中的键可以在模板上下文中使用。例如：
          @app.context_processor
          return {'current_user':'xxx'}
        errorhandler：errorhandler接收状态码，可以自定义返回这种状态码的响应的处理方法。例如：
          @app.errorhandler(404)
          def page_not_found(error):
              return 'This page does not exist',404
