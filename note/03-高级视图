高级视图：
    def my_list1():
        return 'my_list1'
    app.add_url_rule('/list1/', endpoint='list111', view_func=my_list1)
    # endpoint 用于url_for寻找path
    # add_url_rule方法未指定endpoint时 url_for('my_list1') 与 指定了endpoint后 url_for('list111') 得到的path相同
    # add_url_rule方法未指定endpoint时,默认等于方法名

    @app.route('/', endpoint='...')  同理,其底层就是使用了add_url_rule

类视图
    标准类视图：
    1.必须继承自‘flask.views.View’
    2.必须实现'dispatch_request'方法，以后请求过来后，都会执行这个方法。
        这个方法的返回值就相当于时之前的函数视图一样。也必须返回Response、字符串、元祖或子类的对象，
    3.必须通过app.add_url_rule('/path/', endpoint='asdsad', view_func=自定义类.as_view('xxx'))
        如果未指定endpoint,则endpoint等于as_view内的‘xxx’
    4.优点：可以继承，把一些共性的东西抽取出来，子视图直接用即可，如：
    当有几个url需要返回json数据时
    class JSONView(views.View):
        def get_data(self):
            raise NotImplementedError
        def dispatch_request(self):
            return jsonify(self.get_data())
    子类继承后直接实现get_data方法，返回数据(如字典、列表)即可变为json数据
    或当多个视图渲染需要返回相同的变量时
    class ContextView(views.View):
        def __init__(self):
            super(ContextView, self).__init__()
            self.context = {
                'xxx': 'xxxxxxx'
            }
    子类继承后渲染模板时就可以直接返回 **self.context
    需要追加数据可以 self.context.update({'zzz': 'zzzzz'})

    基于请求方法的类视图：
    class LoginView(views.MethodView):
        def get(self):
            return ...

        def post(self):
            ... = request.form.get('...')
            return ...
    app.add_url_rule('/login/', view_func=LoginView.as_view('login'))

    使用装饰器
    from functools import wraps
    def login_require(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            username = request.args.get('username')
            if username and username == 'xxx':
                return func(*args, **kwargs)
            else:
                return '请先登录'
        return wrapper
    # 视图方法使用装饰器(要写在app.route下面)
    @app.route('/settings/', endpoint='setting')
    @login_require
    def settings():
        return '这是设置页面'
    # 类视图使用装饰器(重写类属性decorators, 元祖或者列表都可以)
    class SettingsView(views.View):
        decorators = [login_require]
        def dispatch_request(self):
            return '这是设置界面'
    app.add_url_rule('/setting/', view_func=SettingsView.as_view('setting'))

蓝图：使Flask项目更加模块化，可以将相同模块的视图函数放在同一个蓝图下，同一个文件中，方便管理(一般建立文件夹管理全部蓝图)
    1.在蓝图文件导入Blueprint  'from flask import Blueprint' --> 'xxx_bp = Blueprint('名字', __name__)'
    2.主App文件中注册蓝图  'from blueprints.xxx import xxx_bp' --> 'app.register_blueprint(xxx_bp)'
    3.各模块同一url前缀的方法：'xxx_bp = Blueprint('名字', __name__,url_prefix='/xxx')'
        # '/xxx'后一般不接'/',通常在蓝图下的路由xxx_bp.route('/xxx/')的路径前加'/'

蓝图寻找模板的路径
    xxx=Blueprint()时如果指定了temp_folder,则会在蓝图的同级目录下寻找文件夹下的模板
    如果未指定，则前往template文件夹下寻找，
    如果temp_folder和template文件夹存在同名模板，无论是否指定temp_folder,优先选择template文件夹下的模板

蓝图寻找静态文件的路径
    在模板文件中，加载静态文件，如果使用url_for('static'),那么就只会在app指定的静态文件夹目录下查找静态文件
    如果在加载静态文件的时候，指定蓝图的名字，如url_for('bp1.static'),xxx=Blueprint()时如果指定了static_folder，那么就会到这个蓝图指定的static_folder下查找静态文件文件
    如果未指定，则前往static文件夹下寻找，
    如果static_folder和static文件夹存在同名模板，无论是否指定static_folder,优先选择static文件夹下的模板

使用url_for反转蓝图
    url_for('xxx.xxxxx')  # 使用'蓝图模块名.endpoint'(endpoint不指定时为方法名)，模板和视图函数的用法相同
    即使在同个蓝图中反转视图函数，也要指定蓝图的名字

基于蓝图的子域名实现：
    注:IP地址是不能有子域名的 abc.127.0.0.1:5000与abc.localhost:5000  是不对的
        所以需要修改hosts文件  /etc/hosts
    使用:
        xxx_bp = Blueprint('名字', __name__, subdomain='abc')
        主app文件中注册  app.register_blueprint(xxx_bp)
        配置文件  SERVER_NAME = 'lmc.com:5000'
        hosts 文件中做域名映射，主域名和子域名都要
            127.0.0.1	lmc.com
            127.0.0.1	abc.lmc.com