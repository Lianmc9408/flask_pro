---------------------  List操作  ----------------------------
List操作，redis中的List在在内存中按照一个name对应一个List来存储
    n1 -->  [v1, v2, ...]
    n2 -->  [v3, v4, ...]

lpush(name,values)
    在name对应的list中添加元素，每个新的元素都添加到列表的最左边
    如：
        r.lpush('oo', 11,22,33)
        保存顺序为: 33,22,11
    扩展：
        rpush(name, values) 表示从右向左操作

lpushx(name,value)
    在name对应的list中添加元素，只有name已经存在时，值添加到列表的最左边
    更多：
        rpushx(name, value) 表示从右向左操作

llen(name)
    name对应的list元素的个数

linsert(name, where, refvalue, value))
    在name对应的列表的某一个值前或后插入一个新值
    参数：
        name，redis的name
        where，BEFORE或AFTER
        refvalue，标杆值，即：在它前后插入数据，是值不是下标
        value，要插入的数据

r.lset(name, index, value)
    对name对应的list中的某一个索引位置重新赋值
     参数：
         name，redis的name
         index，list的索引位置
         value，要设置的值

r.lrem(name, value, num)
    在name对应的list中删除指定的值
    参数：
        name，redis的name
        value，要删除的值
        num，  num=0，删除列表中所有的指定值；
              num=2,从前到后，删除2个；
              num=-2,从后向前，删除2个

lpop(name)
    在name对应的列表的左侧获取第一个元素并在列表中移除，返回值则是第一个元素
    更多：
      rpop(name) 表示从右向左操作

lindex(name, index)
    在name对应的列表中根据索引获取列表元素

lrange(name, start, end)
    在name对应的列表分片获取数据
    参数：
        name，redis的name
        start，索引的起始位置
        end，索引结束位置(-1表示最后一个)

ltrim(name, start, end)
    在name对应的列表中移除没有在start-end索引之间的值
    参数：
        name，redis的name
        start，索引的起始位置
        end，索引结束位置

rpoplpush(src, dst)
    从一个列表取出最右边的元素，同时将其添加至另一个列表的最左边
    参数：
       src，要取数据的列表的name
       dst，要添加数据的列表的name

blpop(keys, timeout)
    将多个列表排列，按照从左到右去pop对应列表的元素
    参数：
        keys，redis的name的集合
        timeout，超时时间，当元素所有列表的元素获取完之后，阻塞等待列表内有数据的时间（秒）, 0 表示永远阻塞
     更多：
        r.brpop(keys, timeout)，从右向左获取数据

brpoplpush(src, dst, timeout=0)
    从一个列表的右侧移除一个元素并将其添加到另一个列表的左侧
    参数：
       src，取出并要移除元素的列表对应的name
       dst，要插入元素的列表对应的name
       timeout，当src对应的列表中没有数据时，阻塞等待其有数据的超时时间（秒），0 表示永远阻塞

自定义增量迭代
由于redis类库中没有提供对列表元素的增量迭代，如果想要循环name对应的列表的所有元素，那么就需要：
    1、获取name对应的所有列表
    2、循环列表
但是，如果列表非常大，那么就有可能在第一步时就将程序的内容撑爆，所有有必要自定义一个增量迭代的功能：

def list_iter(name):
    """
    自定义redis列表增量迭代
    :param name: redis中的name，即：迭代name对应的列表
    :return: yield 返回 列表元素
    """
    list_count = r.llen(name)
    for index in range(list_count):
        yield r.lindex(name, index)

使用
for item in list_iter('pp'):
    print item
---------------------  Set操作  ----------------------------
Set操作，Set集合就是不允许重复的列表

sadd(name,values)
    name对应的集合中添加元素

scard(name)
    获取name对应的集合中元素个数

sdiff(keys, *args)
    在第一个name对应的集合中且不在其他name对应的集合的元素集合
    sdiff(keys, set1,set2, ...)
sdiffstore(dest, keys, *args)
    获取第一个name对应的集合中且不在其他name对应的集合，再将其新加入到dest对应的集合中

sinter(keys, *args)
    获取多一个name对应集合的交集

sinterstore(dest, keys, *args)
    获取多一个name对应集合的交集，再讲其加入到dest对应的集合中

sismember(name, value)
     检查value是否是name对应的集合的成员

smembers(name)
    获取name对应的集合的所有成员

smove(src, dst, value)
    将某个成员从一个集合中移动到另外一个集合

spop(name)
    从集合的右侧（尾部）移除一个成员，并将其返回

srandmember(name, numbers)
    从name对应的集合中随机获取 numbers 个元素

srem(name, values)
    在name对应的集合中删除某些值

sunion(keys, *args)
    获取多一个name对应的集合的并集

sunionstore(dest,keys, *args)
    获取多一个name对应的集合的并集，并将结果保存到dest对应的集合中

sscan(name, cursor=0, match=None, count=None)
sscan_iter(name, match=None, count=None)
    同字符串的操作，用于增量迭代分批获取元素，避免内存消耗太大
    有序集合，在集合的基础上，为每元素排序；元素的排序需要根据另外一个值来进行比较，所以，对于有序集合，每一个元素有两个值，即：值和分数，分数专门用来做排序。

zadd(name, *args, **kwargs)
    在name对应的有序集合中添加元素,如：
         zadd('zz', 'n1', 1, 'n2', 2)
         或
         zadd('zz', n1=11, n2=22)

zcard(name)
    获取name对应的有序集合元素的数量

zcount(name, min, max)
    获取name对应的有序集合中分数 在 [min,max] 之间的个数

zincrby(name, value, amount)
    自增name对应的有序集合的 name 对应的分数

r.zrange( name, start, end, desc=False, withscores=False, score_cast_func=float)
    按照索引范围获取name对应的有序集合的元素
    参数：
        name，redis的name
        start，有序集合索引起始位置（非分数）
        end，有序集合索引结束位置（非分数）
        desc，排序规则，默认按照分数从小到大排序
        withscores，是否获取元素的分数，默认只获取元素的值
        score_cast_func，对分数进行数据转换的函数
    更多：
        从大到小排序
        zrevrange(name, start, end, withscores=False, score_cast_func=float)
        按照分数范围获取name对应的有序集合的元素
        zrangebyscore(name, min, max, start=None, num=None, withscores=False, score_cast_func=float)
        从大到小排序
        zrevrangebyscore(name, max, min, start=None, num=None, withscores=False, score_cast_func=float)

zrank(name, value)
    获取某个值在 name对应的有序集合中的排名（从 0 开始）
    更多：
        zrevrank(name, value)，从大到小排序

zrangebylex(name, min, max, start=None, num=None)
    当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的值（lexicographical ordering）来进行排序，
    而这个命令则可以返回给定的有序集合键 key 中，元素的值介于 min 和 max 之间的成员
    对集合中的每个成员进行逐个字节的对比（byte-by-byte compare）， 并按照从低到高的顺序， 返回排序后的集合成员。
    如果两个字符串有一部分内容是相同的话， 那么命令会认为较长的字符串比较短的字符串要大
    参数：
        name，redis的name
        min，左区间（值）。 + 表示正无限； - 表示负无限； ( 表示开区间； [ 则表示闭区间
        min，右区间（值）
        start，对结果进行分片处理，索引位置
        num，对结果进行分片处理，索引后面的num个元素
    如：
        ZADD myzset 0 aa 0 ba 0 ca 0 da 0 ea 0 fa 0 ga
        r.zrangebylex('myzset', "-", "[ca") 结果为：['aa', 'ba', 'ca']
    更多：
        从大到小排序
        zrevrangebylex(name, max, min, start=None, num=None)

zrem(name, values)
    删除name对应的有序集合中值是values的成员
    如：zrem('zz', ['s1', 's2'])

zremrangebyrank(name, min, max)
    根据排名范围删除

zremrangebyscore(name, min, max)
    根据分数范围删除

zremrangebylex(name, min, max)
    根据值返回删除

zscore(name, value)
    获取name对应有序集合中 value 对应的分数

zinterstore(dest, keys, aggregate=None)
    获取两个有序集合的交集，如果遇到相同值不同分数，则按照aggregate进行操作
    aggregate的值为:  SUM  MIN  MAX

zunionstore(dest, keys, aggregate=None)
    获取两个有序集合的并集，如果遇到相同值时，则按照aggregate进行操作
    aggregate的值为:  SUM  MIN  MAX

zscan(name, cursor=0, match=None, count=None, score_cast_func=float)
zscan_iter(name, match=None, count=None,score_cast_func=float)
    同字符串相似，相较于字符串新增score_cast_func，用来对分数进行操作
---------------------  Hash操作  ----------------------------
Hash操作，redis中Hash在内存中的存储格式如下:
              |---------|
    n1  -->   | k1->v1  |
              | k2->v2  |
              | k3->v3  |
              |_________|
    n1  -->   | k9->v99 |
              | kx->vx  |
              |_________|

hset(name, key, value)
    name对应的hash中设置一个键值对（不存在，则创建；否则，修改）
    参数：
         name，redis的name
         key，name对应的hash中的key
         value，name对应的hash中的value
    注：
         hsetnx(name, key, value),当name对应的hash中不存在当前key时则创建（相当于添加）

hmset(name, mapping)
    在name对应的hash中批量设置键值对
    参数：
        name，redis的name
        mapping，字典，如：{'k1':'v1', 'k2': 'v2'}
    如：
        r.hmset('xx', {'k1':'v1', 'k2': 'v2'})

hget(name,key)
    在name对应的hash中获取根据key获取value

hmget(name, keys, *args)
    在name对应的hash中获取多个key的值
    参数：
        name，reids对应的name
        keys，要获取key集合，如：['k1', 'k2', 'k3']
        *args，要获取的key，如：k1,k2,k3
    如：
        r.mget('xx', ['k1', 'k2'])
        或
        print r.hmget('xx', 'k1', 'k2')

hgetall(name)
    获取name对应hash的所有键值

hlen(name)
    获取name对应的hash中键值对的个数

hkeys(name)
    获取name对应的hash中所有的key的值

hvals(name)
    获取name对应的hash中所有的value的值

hexists(name, key)
    检查name对应的hash是否存在当前传入的key

hdel(name,*keys)
    将name对应的hash中指定key的键值对删除

hincrby(name, key, amount=1)
    自增name对应的hash中的指定key的值，不存在则创建key=amount
    参数：
        name，redis中的name
        key， hash对应的key
        amount，自增数（整数）

hincrbyfloat(name, key, amount=1.0)
    自增name对应的hash中的指定key的值，不存在则创建key=amount

    参数：
        name，redis中的name
        key， hash对应的key
        amount，自增数（浮点数）

hscan(name, cursor=0, match=None, count=None)
    增量式迭代获取，对于数据大的数据非常有用，hscan可以实现分片的获取数据，并非一次性将数据全部获取完，从而防止内存被撑爆
    参数：
        name，redis的name
        cursor，游标（基于游标分批取获取数据）
        match，匹配指定key，默认None 表示所有的key
        count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数
    如：
        第一次：cursor1, data1 = r.hscan('xx', cursor=0, match=None, count=None)
        第二次：cursor2, data1 = r.hscan('xx', cursor=cursor1, match=None, count=None)
        ...
        直到返回值cursor的值为0时，表示数据已经通过分片获取完毕

hscan_iter(name, match=None, count=None)
    利用yield封装hscan创建生成器，实现分批去redis中获取数据
    参数：
        match，匹配指定key，默认None 表示所有的key
        count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数
    如：
        for item in r.hscan_iter('xx'):
            print item

--------------事务(管道)操作--------------------
# 定义一个管道
pipeline = xtredis.pipeline()
# 自增
pipeline.incr('key')
# 自减
pipeline.decr('key')
# 执行事务
pipeline.execute()

-------------发布/订阅操作-------------------
# 订阅.py
ps = xtredis.pubsub()
ps.subscribe('xxx')  # 订阅xxx频道
while True:
    for item in ps.listen():
        print(item)  # item-->{'type':'subscribe', 'pattern': None, 'channel':'xxx', 'data': 1}
                     # item-->{'type':'message', 'pattern': None, 'channel':'xxx', 'data': 'xxx@qq.com'}
# 发布.py
xtredis.publish('xxx','xxx@qq.com')  # xxx为消息的频道名字,xxx@qq.com为消息的内容
