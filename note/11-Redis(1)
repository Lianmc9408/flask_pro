http://www.cnblogs.com/wupeiqi/articles/5132791.html
http://www.cnblogs.com/alex3714/articles/6217453.html
https://github.com/andymccurdy/redis-py/
http://doc.redisfans.com/

1.安装:
    sudo apt-get install redis-server
2.卸载
    sudo apt-get purge --auto-remove redis-server
3.启动:redis安装后,默认会自动启动,可以通过以下命令查看:
    ps -aux|grep redis
    手动启动:
        sudo service redis-server start
        或:redis-server 开启服务
4.停止:
    sudo service redis-server stop


终端操作(redis-cli进入终端,前提时开启了redis-server)：
    set key value [ex [s]|px [ms]|nx|xx] 缓存键值对
    get key 取键相对的值
    keys * 查看所有键
    del key 删除键
    expire key timeout(单位为秒)
    ttl key 查看剩余过期时间
    key * 查看redis中的所有key
    flushall 删除redis中所有的键值对
String操作:
    set key value
List操作:
    lpush/rpush key value 从左/右边添加元素
    lrange key start stop  查看列表中的元素(lrange key 0 -1 可以查看列表中的所有元素)
    lpop/rpop key  从左/右边移除列表中的头个元素
    lrem key count value: 将删除key这个列表中,count个值为value的元素
        count>0:从表头开始向表尾搜索,移除与value相等的元素,数量为count
        count<0:从表尾开始向表头搜索,移除与value相等的元素,数量为count的绝对值
        count=0:移除表中所有值为value的元素
    lindex key index 返回key这个列表中,索引为index的元素
    llen key 获取列表中元素的个数
Set操作(无序,不重复):
    sadd key value1 value2 ... 添加元素
    smembers key 查看集合中的元素
    srem key value1 value2 ... 删除元素
    scard key 查看集合中的元素个数
    sinter key1 key2 ...  获取多个集合的交集
    sunion key1 key2 ...  获取多个集合的并集
    sdiff key1 key2 ... 获取多个集合的差集
Hash操作:
    hset key field value :添加元素,field为key内键值对的键,value为key内键值对的值
    hget key field : 获取某个哈希中对应field的元素
    hdel key field : 删除元素
    hgetall key : 获取某个哈希中所有的键值对
    hkeys key : 获取某个哈希中所有的field
    hvals key : 获取某个哈希中所有的value
    hexists key field: 判断某个哈希中是否存在对应的field (返回1表示存在,0表示不存在)
    hlen key :获取哈希中键值对的个数
事务操作:Redis事务可以一次执行多个命令,事务具有一下特征:
    a.隔离操作:事务中的所有命令都会序列化,按顺序地执行,不会被其他命令所干扰
    b.原子操作:事务中的命令要么全部被执行,要么全部都不执行
    命令:
        multi : 开启一个事务,之后执行的所有命令都是在这个事务中执行的
        exec : 执行事务,会将在multi和exec中的操作一并提交
        discard : 取消事务,会将multi后的所有命令取消
        watch key1 key2 ... 监视一个或者多个key,如果在事务执行之前这些key被其他命令改动,那么事务将被打断
            > watch key
            > multi
            > set key xxx
            > exec  --> 返回OK

            > watch key
            > multi
            > set key xxx
                > 此时在另一个shell对这个key进行了set操作
            > exec  --> 此时shell返回nil,set key xxx 操作没有被执行
        unwatch : 取消所有key的监视
发布和订阅操作:
    publish channel message 给某个频道发布消息
    subscribe channel1 channel2 ...  订阅某个(某些)频道的消息

数据持久化(RDB和AOF两种机制):
    配置文件位于：/etc/redis/redis.conf，修改配置文件要重启服务(sudo service redis-server restart)
    RDB:
        开启关闭:默认开启。把配置文件中所有的save都注释，就是关闭了,save大约位于配置文件147~149行前后。
        同步机制:可以指定某个时间内发生多少个命令进行同步。比如1分钟内发生了2次命令，就做一次同步。
            save 900 1  # 900表示900秒，1表示出现一个写操作，即900秒内发生了1次redis数据更新的操作，那么redis就会做一次同步操作到RDB文件中
            save 300 10  # 300秒内至少发生了10次redis数据更新的操作，那么redis就会做一次同步操作到RDB文件中
            save 60 10000  # 60秒内至少发生了10000次redis数据更新的操作，那么redis就会做一次同步操作到RDB文件中
        存储内容:存储的是redis里面的具体的值，不是命令，而且是经过压缩后存储进去的
        存储文件的路径:根据dir以及dbfilename来指定路径和具体的文件名
            dir /var/lib/redis
            dbfilename dump.rdb
        优点:（1）存储数据到文件中会进行压缩，文件体积比aof小。
            （2）因为存储的是redis具体的值，并且会经过压缩，因此在恢复的时候速度比AOF快。
            （3）非常适用于备份。
        缺点:（1）RDB在多少时间内发生了多少写操作的时候就会出发同步机制，因为采用压缩机制，RDB在同步的时候都重新保存整个Redis中的数据，因此你一般会设置在最少5分钟才保存一次数据。
                在这种情况下，一旦服务器故障，会造成5分钟的数据丢失。
            （2）在数据保存进RDB的时候，Redis会fork出一个子进程用来同步，在数据量比较大的时候，可能会非常耗时。
    AOF:
        开启关闭:在配置文件中appendonly yes即开启了aof，为no关闭。
        同步机制:每秒同步或者每次发生命令后同步
            appendfsync always  # 每次发生数据更新命令后(如set，del)同步
            appendfsync everysec  # 每秒同步
            appendfsync no  # 使用操作系统的同步机制，一般30s一次
        存储内容:存储的是执行的更新数据的操作命令
        存储文件的路径:根据dir以及appendfilename来指定具体的路径和文件名
            dir /var/lib/redis
            appendfilename "appendonly.aof"
        优点:（1）AOF的策略是每秒钟或者每次发生写操作的时候都会同步，因此即使服务器故障，最多只会丢失1秒的数据。 
            （2）AOF存储的是Redis命令，并且是直接追加到aof文件后面，因此每次备份的时候只要添加新的数据进去就可以了。
            （3）如果AOF文件比较大了，那么Redis会进行重写，只保留最小的命令集合。
        缺点:（1）AOF文件因为没有压缩，因此体积比RDB大。 
            （2）AOF是在每秒或者每次写操作都进行备份，因此如果并发量比较大，效率可能有点慢。
            （3）AOF文件因为存储的是命令，因此在灾难恢复的时候Redis会重新运行AOF中的命令，速度不及RDB。
    更多:http://redisdoc.com/topic/persistence.html#redis
    
安全：在配置文件(/etc/redis/redis.conf)中，将'requirepass'取消注释并设置，那么客户端连接的时候，需要使用密码：
     > redis-cli -p 127.0.0.1 -p 6379
     redis> set username xxx
     (error) NOAUTH Authentication required.
     redis> auth password
     redis> set username xxx
     OK
     或使用密码登录：redis-cli -p 127.0.0.1 -p 6379 -a password
 
其他机器连接本机reids:
    修改配置文件(/etc/redis/redis.conf)文件中的'bind'， 添加ip地址为: bind 127.0.0.1 xxx.xxx.xxx.xxx(本机的ip地址)
    注意xxx.xxx.xxx.xxx为本机的ip地址,非其他要连接redis的机器的ip地址
    
Python操作redis:
    1.安装python-redis：
        pip install redis
    2.连接redis：
         # 从redis包中导入Redis类
         from redis import Redis
         # 初始化redis实例变量
         xtredis = Redis(host='192.168.174.130',port=6379)
         
    3.常用操作
        delete(*names)
            根据删除redis中的任意数据类型

        exists(name)
            检测redis的name是否存在

        keys(pattern='*')
            根据模型获取redis的name,可以正则表达式
            更多：
              KEYS * 匹配数据库中所有 key 。
              KEYS h?llo 匹配 hello ， hallo 和 hxllo 等。
              KEYS h*llo 匹配 hllo 和 heeeeello 等。
              KEYS h[ae]llo 匹配 hello 和 hallo ，但不匹配 hillo

        expire(name ,time)
            为某个redis的某个name设置超时时间

        rename(src, dst)
            对redis的name重命名为

        move(name, db)
            将redis的某个值移动到指定的db下

        randomkey()
            随机获取一个redis的name（不删除）

        type(name)
            获取name对应值的类型

        scan(cursor=0, match=None, count=None)
        scan_iter(match=None, count=None)
            同字符串操作，用于增量迭代获取key
---------------------  String操作  ----------------------------
String操作，redis中的String在在内存中按照一个name对应一个value来存储。
    n1   --->    v1
    n2   --->    v2
    n3   --->    v3

set(name, value, ex=None, px=None, nx=False, xx=False)
    在Redis中设置值，默认，不存在则创建，存在则修改
    参数：
         ex，过期时间（秒）
         px，过期时间（毫秒）
         nx，如果设置为True，则只有name不存在时，当前set操作才执行
         xx，如果设置为True，则只有name存在时，当前set操作才执行

setnx(name, value)
    设置值，只有name不存在时，执行设置操作（添加）

setex(name, value, time)
    time，过期时间（数字秒 或 timedelta对象）

psetex(name, time_ms, value)
    相当于setex的time单位为毫秒
    time_ms，过期时间（数字毫秒 或 timedelta对象）

mset(*args, **kwargs)
    批量设置值，如：
        mset(k1='v1', k2='v2')
        或
        mset({'k1': 'v1', 'k2': 'v2'})

get(name)
    获取值

mget(keys, *args)
    批量获取，如：
        mget('ylr', 'wupeiqi')
        或
        r.mget(['ylr', 'wupeiqi'])

getset(name, value)
    设置新值并获取原来的值

getrange(key, start, end)
    获取子序列（根据字节获取，非字符）
    参数：
         name，Redis 的 name
         start，起始位置（字节）
         end，结束位置（字节）
         如： "武沛齐" ，0-3表示 "武"

setrange(name, offset, value)
    修改字符串内容，从指定字符串索引开始向后替换（新值太长时，则向后添加）
    参数：
        offset，字符串的索引，字节（一个汉字三个字节）
        value，要设置的值

setbit(name, offset, value)
    # 对name对应值的二进制表示的位进行操作
    # 参数：
        # name，redis的name
        # offset，位的索引（将值变换成二进制后再进行索引）
        # value，值只能是 1 或 0
    # 注：如果在Redis中有一个对应： n1 = "foo"，
            那么字符串foo的二进制表示为：01100110 01101111 01101111
        所以，如果执行 setbit('n1', 7, 1)，则就会将第7位设置为1，
            那么最终二进制则变成 01100111 01101111 01101111，即："goo"
    # 扩展，转换二进制表示：
        # source = "武沛齐"
        source = "foo"
        for i in source:
            num = ord(i)
            print bin(num).replace('b','')
        特别的，如果source是汉字 "武沛齐"怎么办？
        答：对于utf-8，每一个汉字占 3 个字节，那么 "武沛齐" 则有 9个字节
           对于汉字，for循环时候会按照 字节 迭代，那么在迭代时，将每一个字节转换 十进制数，然后再将十进制数转换成二进制
            11100110 10101101 10100110 11100110 10110010 10011011 11101001 10111101 10010000
            -------------------------- ----------------------------- -----------------------------
                        武                         沛                           齐

getbit(name, offset)
    获取name对应的值的二进制表示中的某位的值 （0或1）

bitcount(key, start=None, end=None)
    获取name对应的值的二进制表示中 1 的个数
    参数：
        key，Redis的name
        start，位起始位置
        end，位结束位置

bitop(operation, dest, *keys)
    获取多个值，并将值做位运算，将最后的结果保存至新的name对应的值
    参数：
        operation,AND（并） 、 OR（或） 、 NOT（非） 、 XOR（异或）
        dest, 新的Redis的name
        *keys,要查找的Redis的name
    如：
        bitop("AND", 'new_name', 'n1', 'n2', 'n3')
        # 获取Redis中n1,n2,n3对应的值，然后讲所有的值做位运算（求并集），然后将结果保存 new_name 对应的值中

strlen(name)
    返回name对应值的字节长度（一个汉字3个字节）

incr(self, name, amount=1)
    自增 name对应的值，当name不存在时，则创建name＝amount，否则，则自增。
    参数：
    name,Redis的name
    amount,自增数（必须是整数）

注：同incrby
incrbyfloat(self, name, amount=1.0)
    自增 name对应的值，当name不存在时，则创建name＝amount，否则，则自增。
    参数：
        name,Redis的name
        amount,自增数（浮点型）

decr(self, name, amount=1)
    自减 name对应的值，当name不存在时，则创建name＝amount，否则，则自减。
    参数：
        name,Redis的name
        amount,自减数（整数）

append(key, value)
    在redis name对应的值后面追加内容
    参数：
        key, redis的name
        value, 要追加的字符串
